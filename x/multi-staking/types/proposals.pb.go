// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multistaking/v1/proposals.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddBondDenomProposal struct {
	Title             string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description       string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BondCoinAdd       string                                  `protobuf:"bytes,3,opt,name=bond_coin_add,json=bondCoinAdd,proto3" json:"bond_coin_add,omitempty"`
	BondCoinWeightAdd *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=bond_coin_weight_add,json=bondCoinWeightAdd,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bond_coin_weight_add,omitempty"`
}

func (m *AddBondDenomProposal) Reset()         { *m = AddBondDenomProposal{} }
func (m *AddBondDenomProposal) String() string { return proto.CompactTextString(m) }
func (*AddBondDenomProposal) ProtoMessage()    {}
func (*AddBondDenomProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5028153a52b38c49, []int{0}
}
func (m *AddBondDenomProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddBondDenomProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddBondDenomProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddBondDenomProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddBondDenomProposal.Merge(m, src)
}
func (m *AddBondDenomProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddBondDenomProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddBondDenomProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddBondDenomProposal proto.InternalMessageInfo

func (m *AddBondDenomProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddBondDenomProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AddBondDenomProposal) GetBondCoinAdd() string {
	if m != nil {
		return m.BondCoinAdd
	}
	return ""
}

type UpdateBondCoinWeightProposals struct {
	Title                string                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string                                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BondDenomChange      string                                  `protobuf:"bytes,3,opt,name=bond_denom_change,json=bondDenomChange,proto3" json:"bond_denom_change,omitempty"`
	BondCoinWeightChange *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=bond_coin_weight_change,json=bondCoinWeightChange,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bond_coin_weight_change,omitempty"`
}

func (m *UpdateBondCoinWeightProposals) Reset()         { *m = UpdateBondCoinWeightProposals{} }
func (m *UpdateBondCoinWeightProposals) String() string { return proto.CompactTextString(m) }
func (*UpdateBondCoinWeightProposals) ProtoMessage()    {}
func (*UpdateBondCoinWeightProposals) Descriptor() ([]byte, []int) {
	return fileDescriptor_5028153a52b38c49, []int{1}
}
func (m *UpdateBondCoinWeightProposals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBondCoinWeightProposals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBondCoinWeightProposals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBondCoinWeightProposals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBondCoinWeightProposals.Merge(m, src)
}
func (m *UpdateBondCoinWeightProposals) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBondCoinWeightProposals) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBondCoinWeightProposals.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBondCoinWeightProposals proto.InternalMessageInfo

func (m *UpdateBondCoinWeightProposals) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateBondCoinWeightProposals) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateBondCoinWeightProposals) GetBondDenomChange() string {
	if m != nil {
		return m.BondDenomChange
	}
	return ""
}

type RemoveBondCoinProposal struct {
	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	BondCoinRemove string `protobuf:"bytes,3,opt,name=bond_coin_remove,json=bondCoinRemove,proto3" json:"bond_coin_remove,omitempty"`
}

func (m *RemoveBondCoinProposal) Reset()         { *m = RemoveBondCoinProposal{} }
func (m *RemoveBondCoinProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveBondCoinProposal) ProtoMessage()    {}
func (*RemoveBondCoinProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_5028153a52b38c49, []int{2}
}
func (m *RemoveBondCoinProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBondCoinProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBondCoinProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBondCoinProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBondCoinProposal.Merge(m, src)
}
func (m *RemoveBondCoinProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBondCoinProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBondCoinProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBondCoinProposal proto.InternalMessageInfo

func (m *RemoveBondCoinProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RemoveBondCoinProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoveBondCoinProposal) GetBondCoinRemove() string {
	if m != nil {
		return m.BondCoinRemove
	}
	return ""
}

func init() {
	proto.RegisterType((*AddBondDenomProposal)(nil), "multistaking.v1.AddBondDenomProposal")
	proto.RegisterType((*UpdateBondCoinWeightProposals)(nil), "multistaking.v1.UpdateBondCoinWeightProposals")
	proto.RegisterType((*RemoveBondCoinProposal)(nil), "multistaking.v1.RemoveBondCoinProposal")
}

func init() { proto.RegisterFile("multistaking/v1/proposals.proto", fileDescriptor_5028153a52b38c49) }

var fileDescriptor_5028153a52b38c49 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcb, 0x6a, 0xdb, 0x40,
	0x14, 0x86, 0xad, 0xde, 0xa0, 0x53, 0x5a, 0xb7, 0x42, 0xb4, 0xae, 0xa1, 0xb2, 0xd1, 0xa2, 0x98,
	0x80, 0x25, 0x4c, 0x36, 0xc9, 0xd2, 0x97, 0x07, 0x08, 0x0e, 0x21, 0x90, 0x8d, 0x90, 0x66, 0x06,
	0x69, 0xb0, 0x34, 0x47, 0x68, 0xc6, 0xce, 0xe5, 0x29, 0xf2, 0x30, 0x79, 0x88, 0x2c, 0x4d, 0x56,
	0x21, 0x90, 0x10, 0xec, 0x57, 0xc8, 0x03, 0x04, 0x8d, 0x46, 0xb1, 0x9d, 0xec, 0xe2, 0x95, 0x74,
	0xce, 0xff, 0x6b, 0xfe, 0xf9, 0x8e, 0x0e, 0x6a, 0xa5, 0xd3, 0x44, 0x32, 0x21, 0x83, 0x09, 0xe3,
	0x91, 0x37, 0xeb, 0x79, 0x59, 0x0e, 0x19, 0x88, 0x20, 0x11, 0x6e, 0x96, 0x83, 0x04, 0xb3, 0xbe,
	0x6e, 0x70, 0x67, 0xbd, 0xa6, 0x15, 0x41, 0x04, 0x4a, 0xf3, 0x8a, 0xb7, 0xd2, 0xd6, 0xfc, 0x8b,
	0x41, 0xa4, 0x20, 0xfc, 0x52, 0x28, 0x8b, 0x52, 0x72, 0xee, 0x0d, 0x64, 0xf5, 0x09, 0x19, 0x00,
	0x27, 0x23, 0xca, 0x21, 0x3d, 0xd0, 0x09, 0xa6, 0x85, 0x3e, 0x4b, 0x26, 0x13, 0xda, 0x30, 0xda,
	0x46, 0xe7, 0xeb, 0xb8, 0x2c, 0xcc, 0x36, 0xfa, 0x46, 0xa8, 0xc0, 0x39, 0xcb, 0x24, 0x03, 0xde,
	0xf8, 0xa0, 0xb4, 0xf5, 0x96, 0xe9, 0xa0, 0xef, 0x21, 0x70, 0xe2, 0x63, 0x60, 0xdc, 0x0f, 0x08,
	0x69, 0x7c, 0x2c, 0x3d, 0x45, 0x73, 0x08, 0x8c, 0xf7, 0x09, 0x31, 0x19, 0xb2, 0x56, 0x9e, 0x53,
	0xca, 0xa2, 0x58, 0x2a, 0xeb, 0xa7, 0xc2, 0x3a, 0xd8, 0xbb, 0x7b, 0x68, 0xfd, 0x8f, 0x98, 0x8c,
	0xa7, 0xa1, 0x8b, 0x21, 0xd5, 0xf7, 0xd5, 0x8f, 0xae, 0x20, 0x13, 0x4f, 0x9e, 0x67, 0x54, 0xb8,
	0x23, 0x8a, 0x6f, 0xae, 0xba, 0x48, 0xe3, 0x8c, 0x28, 0x1e, 0xff, 0xaa, 0x42, 0x8e, 0xd5, 0x99,
	0x7d, 0x42, 0x9c, 0x27, 0x03, 0xfd, 0x3b, 0xca, 0x48, 0x20, 0xe9, 0x60, 0x43, 0xab, 0x38, 0xc5,
	0xbb, 0x41, 0x77, 0x90, 0x8a, 0xf3, 0x49, 0x31, 0x36, 0x1f, 0xc7, 0x01, 0x8f, 0xa8, 0x86, 0xad,
	0x87, 0xd5, 0x38, 0x87, 0xaa, 0x6d, 0x02, 0xfa, 0xf3, 0x06, 0x58, 0x7f, 0xb1, 0x2d, 0xb3, 0xb5,
	0xc9, 0x5c, 0x06, 0x3a, 0x17, 0xe8, 0xf7, 0x98, 0xa6, 0x30, 0x7b, 0xa1, 0xde, 0xfa, 0xbf, 0x76,
	0xd0, 0xcf, 0x15, 0x42, 0xae, 0xce, 0xd6, 0xb4, 0x3f, 0xaa, 0x1b, 0xe8, 0xc4, 0xc3, 0xeb, 0x85,
	0x6d, 0xcc, 0x17, 0xb6, 0xf1, 0xb8, 0xb0, 0x8d, 0xcb, 0xa5, 0x5d, 0x9b, 0x2f, 0xed, 0xda, 0xed,
	0xd2, 0xae, 0x9d, 0xec, 0xaf, 0x11, 0xe6, 0x34, 0x48, 0x18, 0x48, 0x8a, 0x63, 0x4f, 0x2d, 0x71,
	0xb7, 0x5a, 0xf3, 0xb3, 0x57, 0xb5, 0x02, 0x0f, 0xbf, 0xa8, 0x75, 0xdd, 0x7d, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x86, 0x91, 0xe1, 0xaa, 0x13, 0x03, 0x00, 0x00,
}

func (m *AddBondDenomProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddBondDenomProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddBondDenomProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BondCoinWeightAdd != nil {
		{
			size := m.BondCoinWeightAdd.Size()
			i -= size
			if _, err := m.BondCoinWeightAdd.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintProposals(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.BondCoinAdd) > 0 {
		i -= len(m.BondCoinAdd)
		copy(dAtA[i:], m.BondCoinAdd)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.BondCoinAdd)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBondCoinWeightProposals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBondCoinWeightProposals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBondCoinWeightProposals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BondCoinWeightChange != nil {
		{
			size := m.BondCoinWeightChange.Size()
			i -= size
			if _, err := m.BondCoinWeightChange.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintProposals(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.BondDenomChange) > 0 {
		i -= len(m.BondDenomChange)
		copy(dAtA[i:], m.BondDenomChange)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.BondDenomChange)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBondCoinProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBondCoinProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBondCoinProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondCoinRemove) > 0 {
		i -= len(m.BondCoinRemove)
		copy(dAtA[i:], m.BondCoinRemove)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.BondCoinRemove)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposals(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddBondDenomProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.BondCoinAdd)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.BondCoinWeightAdd != nil {
		l = m.BondCoinWeightAdd.Size()
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func (m *UpdateBondCoinWeightProposals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.BondDenomChange)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.BondCoinWeightChange != nil {
		l = m.BondCoinWeightChange.Size()
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func (m *RemoveBondCoinProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.BondCoinRemove)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func sovProposals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposals(x uint64) (n int) {
	return sovProposals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddBondDenomProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddBondDenomProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddBondDenomProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondCoinAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondCoinAdd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondCoinWeightAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.BondCoinWeightAdd = &v
			if err := m.BondCoinWeightAdd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBondCoinWeightProposals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBondCoinWeightProposals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBondCoinWeightProposals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenomChange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenomChange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondCoinWeightChange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.BondCoinWeightChange = &v
			if err := m.BondCoinWeightChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBondCoinProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBondCoinProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBondCoinProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondCoinRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondCoinRemove = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposals = fmt.Errorf("proto: unexpected end of group")
)
